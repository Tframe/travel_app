/* Author: Trevor Frame
 * Date: 12/07/2020
 * Description: Add, update, and remove operations
 * for storing countries data into Firebase Firestore.
 * Countries will be a sub collection under trips
 */
import 'dart:typed_data';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import './city_provider.dart';
import './flight_provider.dart';

class Country extends ChangeNotifier {
  String id;
  String country;
  double latitude;
  double longitude;
  List<City> cities;
  List<Uint8List> googleImages;
  String countryImageUrl;
  List<Flight> flights;

  Country({
    this.id,
    this.country,
    this.latitude,
    this.longitude,
    this.cities,
    this.googleImages,
    this.countryImageUrl,
    this.flights,
  });

  List<Country> _countries = [];

  List<Map<String, dynamic>> _mapTripCountries = [];

  //getter function to return list of trips
  List<Country> get countries {
    return [..._countries];
  }

  //Function to add destination to Firebase Firestore
  Future<void> addCountry(
    String userId,
    String tripId,
    Country countryValues,
  ) async {
    try {
      //Create a TripProvider object with newly aquired autogenerated id.
      await FirebaseFirestore.instance
          .collection('users')
          .doc('$userId')
          .collection('trips')
          .doc('$tripId')
          .collection('countries')
          .add({
        'country': countryValues.country,
        'countryImageUrl': countryValues.countryImageUrl,
        'latitude': countryValues.latitude,
        'longitude': countryValues.longitude,
      }).then((docRef) async {
        countryValues.id = docRef.id;
        try {
          await FirebaseFirestore.instance
              .collection('users')
              .doc('$userId')
              .collection('trips')
              .doc('$tripId')
              .collection('countries')
              .doc(docRef.id)
              .update({
            'id': docRef.id,
          }).then(
            (value) => print('finished updating country id'),
          );
        } catch (error) {
          throw error;
        }
      });
      //This will be used to add to list of trips in the state
      final newDestination = Country(
        id: countryValues.id, //ADD CODE TO GET ID
        country: countryValues.country,
        latitude: countryValues.latitude,
        longitude: countryValues.longitude,
      );
      _countries.add(newDestination);
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  Future<void> setCountriesList(List<Country> countryList) async {
    _countries = countryList;
  }

  Future<void> setCountriesMap(String tripId, List<Country> countryList) async {
    _mapTripCountries.add({
      'tripId': tripId,
      'countryList': countryList,
    });
  }

  List<Country> getCountryListByTripId(String tripId) {
    List<Country> tempList = [];
    int mapIndex = -1;
    int attempts = 0;
    do {
      mapIndex = _mapTripCountries
          .indexWhere((country) => country['tripId'] == tripId);
      attempts++;
    } while (mapIndex == -1 && attempts < 50);
    if (attempts >= 50) {
      tempList = [];
    } else {
      tempList = _mapTripCountries[mapIndex]['countryList'];
    }
    return tempList;
  }

  //Get all countries for a trip
  Future<void> fetchAndSetCountries(
    String userId,
    String tripId,
  ) async {
    List<Country> countryList = [];
    bool collection = false;
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc('$userId')
          .collection('trips')
          .doc('$tripId')
          .collection('countries')
          .get()
          .then(
        (country) {
          if (country.docs.length > 0) {
            collection = true;
            country.docs.asMap().forEach(
              (index, countryData) {
                countryList.add(
                  Country(
                    id: country.docs[index].id,
                    country: countryData.data()['country'],
                    latitude: countryData.data()['latitude'],
                    longitude: countryData.data()['longitude'],
                    countryImageUrl: countryData.data()['countryImageUrl'],
                  ),
                );
              },
            );
          } else
            collection = false;
        },
      ).then(
        (value) => print('Fetched countries'),
      );
    } catch (error) {
      throw error;
    }
    if (collection) {
      await setCountriesMap(tripId, countryList);
    }

    notifyListeners();
  }

  //Function to update country in Firebase Firestore
  Future<void> updateCountry(
    String userId,
    String tripId,
    String countryId,
    Country country,
  ) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc('$userId')
          .collection('trips')
          .doc('$tripId')
          .collection('countries')
          .doc('$countryId')
          .update({
        'country': country.country,
        'latitude': country.latitude,
        'longitude': country.longitude,
        'countryImageUrl': country.countryImageUrl,
      });
    } catch (error) {
      throw error;
    }
  }

  //Function to remove a country from the list
  Future<void> removeCountry(int index) async {
    try {
      if (index > _countries.length - 1 || index < 0) {
        return;
      }
      _countries.removeAt(index);
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  //Function to remove all countries from list.
  Future<void> removeAllCountries() async {
    try {
      if (_countries.length > 0) {
        _countries = [];
        notifyListeners();
      }
      return;
    } catch (error) {
      throw error;
    }
  }
}
