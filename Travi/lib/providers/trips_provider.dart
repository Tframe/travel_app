import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:groupy/providers/address_provider.dart';

import './trip_provider.dart';
import './user_provider.dart';
import './lodging_provider.dart';
import './activity_provider.dart';
import './transportation_provider.dart';
import './city_provider.dart';
import './country_provider.dart';

class TripsProvider extends ChangeNotifier {
  List<TripProvider> _trips = [];

  TripsProvider();

  //getter function to return list of trips
  List<TripProvider> get trips {
    return [..._trips];
  }

  TripProvider findById(String id) {
    return _trips.firstWhere((trip) => trip.id == id);
  }

  //Adds a user created trip to their trips list in Firebase Firestore DB
  Future<void> addTrip(TripProvider tripValues, String userId) async {
    try {
      await FirebaseFirestore.instance
          .collection('users')
          .doc('$userId')
          .collection('trips')
          .add({
        'title': tripValues.title,
        'creator': userId,
        'startDate': tripValues.startDate,
        'endDate': tripValues.endDate,
        'countries': tripValues.countries
            .map((countries) => {
                  'country': countries.country,
                  'cities': countries.cities
                      .map((cities) => {
                            'city': cities.city,
                            'latitude': cities.latitude,
                            'longitude': cities.longitude,
                            'places': cities.places
                                .map((places) => {
                                      'title': '',
                                      'address': '',
                                      'latitude': 0.00,
                                      'longitude': 0.00,
                                    })
                                .toList(),
                          })
                      .toList(),
                  'latitude': countries.latitude,
                  'longitude': countries.longitude,
                })
            .toList(),
        'description': tripValues.description,
        'group': tripValues.group
            .map((group) => {
                  'id': group.id,
                  'firstName': group.firstName,
                  'lastName': group.lastName,
                  'email': group.email,
                  'phone': group.phone,
                  'profilePicUrl': group.profilePicUrl,
                })
            .toList(),
        'activities': tripValues.activities
        .map((activity) => {
          'id': activity.id,
          'title': activity.title,
          'reservationID': activity.reservationID,
          'startingDateTime': activity.startingDateTime,
          'endingDateTime': activity.endingDateTime,
          'locationIDs': activity.locationIDs
        }),
        'lodgings': tripValues.lodgings
        .map((lodging) => {
          'id': lodging.id,
          'name': lodging.name,
          'checkInDateTime': lodging.checkInDateTime,
          'checkOutDateTime': lodging.checkOutDateTime,
          'locationId': lodging.locationID,
          'reservationID': lodging.reservationID,
        }),
        'tranportations': tripValues.transportations
        .map((transportation) => {
          'id': transportation.id,
          'company': transportation.company,
          'reservationID': transportation.reservationID,
          'startingLocation': transportation.startingLocation,
          'endingLocation': transportation.endingLocation,
          'startingDateTime': transportation.startingDateTime,
          'endingDateTime': transportation.endingDateTime
        }),
        'isPrivate': true,
      }).then((value) {
        print('Trip added');
      }).catchError((onError) {
        print('Failed to add Trip');
        throw onError;
      });

      //Create a TripProvider object with newly aquired autogenerated id.
      //This will be used to add to list of trips in the state
      final newTrip = TripProvider(
        id: null, //ADD CODE TO GET ID
        title: tripValues.title,
        startDate: tripValues.startDate,
        endDate: tripValues.endDate,
        countries: tripValues.countries,
        description: tripValues.description,
        group: tripValues.group,
      );

      _trips.add(newTrip);

      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  //used to set trips once trips are loaded from firebase
  Future<void> setTripsList(List<TripProvider> loadedTrip) async {
    _trips = loadedTrip;
  }

  //Get trips list of specific user from Firebase Firestore
  Future<void> fetchAndSetTrips(User user) async {
    final List<TripProvider> loadedTrips = [];
    _trips = [];
    try {
      FirebaseFirestore.instance
          .collection('users')
          .doc('${user.uid}')
          .collection('trips')
          .snapshots()
          .forEach((trip) {
        trip.docs.asMap().forEach((index, data) {
          loadedTrips.add(TripProvider(
            id: trip.docs[index].id,
            title: trip.docs[index].data()['title'],
            startDate: trip.docs[index].data()['startDate'].toDate(),
            endDate: trip.docs[index].data()['endDate'].toDate(),
            description: trip.docs[index].data()['description'],
            group: trip.docs[index]
                .data()['group']
                .asMap()
                .forEach((groupIndex, groupData) {
              UserProvider(
                id: groupData['id'],
                firstName: groupData['firstName'],
                lastName: groupData['lastName'],
                email: groupData['email'],
                phone: groupData['phone'],
                profilePicUrl: groupData['profilePicUrl'],
              );
            }),
            countries: trip.docs[index]
                .data()['countries']
                .asMap()
                .forEach((countryIndex, countryData) {
              Country(
                id: null,
                country: countryData['country'],
                latitude: countryData['latitude'],
                longitude: countryData['longitude'],
                cities: countryData['cities']
                    .asMap()
                    .forEach((cityIndex, cityData) {
                  City(
                    id: null,
                    city: cityData['city'],
                    latitude: cityData['latitude'],
                    longitude: cityData['longitude'],
                    places: cityData['places']
                        .asMap()
                        .forEach((placeIndex, placeData) {
                      Address(
                        id: null,
                        title: placeData['title'],
                        address: placeData['address'],
                        latitude: placeData['latitude'],
                        longitude: placeData['longitude'],
                      );
                    }),
                  );
                }),
              );
            }),
            activities: trip.docs[index]
                .data()['activities']
                .asMap()
                .forEach((activitiesIndex, activitiesData) {
              Activity(
                id: null,
                title: activitiesData['title'],
                reservationID: activitiesData['reservationID'],
                locationIDs: activitiesData['locationIDs'],
                startingDateTime: activitiesData['startingDateTime'],
                endingDateTime: activitiesData['endingDateTime'],
              );
            }),
            lodgings: trip.docs[index]
                .data()['lodgings']
                .asMap()
                .forEach((lodgingsIndex, lodgingsData) {
              Lodging(
                id: null,
                name: lodgingsData['name'],
                locationID: lodgingsData['locationID'],
                reservationID: lodgingsData['reservationID'],
                checkInDateTime: lodgingsData['checkInDateTime'],
                checkOutDateTime: lodgingsData['checkOutDateTime'],
              );
            }),
            transportations: trip.docs[index]
                .data()['transportations']
                .asMap()
                .forEach((transportationsIndex, transportationsData) {
              Transportation(
                id: transportationsData['id'],
                company: transportationsData['company'],
                reservationID: transportationsData['reservationID'],
                startingLocation: transportationsData['startingLocation'],
                startingDateTime: transportationsData['startingDateTime'],
                endingLocation: transportationsData['endingLocation'],
                endingDateTime: transportationsData['endingDateTime'],
                transportationType: transportationsData['transportationType'],
              );
            }),
            isPrivate: trip.docs[index].data()['isPrivate'],
            image: trip.docs[index].data()['imageUrl'],
          ));
        });
      });
      await setTripsList(loadedTrips);
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  //Update user specified trip in Firebase Firestore
  Future<void> updateTrip(
      String id, TripProvider newTrip, String userId) async {
    final tripIndex = _trips.indexWhere((trip) => trip.id == id);
    if (tripIndex >= 0) {
      try {} catch (error) {
        throw error;
      }
    }
  }
}
