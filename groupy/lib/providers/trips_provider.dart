import 'dart:convert';
import 'package:flutter/cupertino.dart';
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart';

import './trip_provider.dart';
import './user_provider.dart';
import './lodging_provider.dart';
import './activity_provider.dart';
import './transportation_provider.dart';
import 'destination_provider.dart';

class TripsProvider extends ChangeNotifier {
  List<TripProvider> _trips = [];

  final String authToken;

  TripsProvider(this.authToken, this._trips);

  //getter function to return list of trips
  List<TripProvider> get trips {
    return [..._trips];
  }

  TripProvider findById(String id) {
    return _trips.firstWhere((trip) => trip.id == id);
  }

  //Adds a user created trip to their trips list
  Future<void> addTrip(TripProvider tripValues, String userId) async {

    if (tripValues.destinations[0].state == '') {
      tripValues.destinations[0].state = null;
    }
    final url = 'https://the-travel-app-0920.firebaseio.com/userTrips/$userId/trips.json?auth=$authToken';
    try {
      //send post request to url with a json formatted trip document.
      var response = await http.post(url,
          body: json.encode({
            'title': tripValues.title,
            'startDate': tripValues.startDate.toIso8601String(),
            'endDate': tripValues.endDate.toIso8601String(),
            'destinations': [
              {
                'country': tripValues.destinations[0].country,
                'city': tripValues.destinations[0].city,
                'state': tripValues.destinations[0].state,
              },
            ]
          }));
      //Create a TripProvider object with newly aquired autogenerated id.
      //This will be used to add to list of trips in the state
      final newTrip = TripProvider(
        id: json.decode(response.body)['name'],
        title: tripValues.title,
        startDate: tripValues.startDate,
        endDate: tripValues.endDate,
        destinations: tripValues.destinations,
      );
      _trips.add(newTrip);
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  //Get trips list of specific user
  Future<void> fetchAndSetTrips(String userId) async {
    _trips = [];
    final url =
        'https://the-travel-app-0920.firebaseio.com/userTrips/$userId/trips.json?auth=$authToken';
    try {
      final List<TripProvider> loadedTrips = [];
      final response = await http.get(url);
      //Create a map of trips with the string key and data
      final extractedData = json.decode(response.body) as Map<String, dynamic>;
      //if there is nothing in list, return.
      if (extractedData == null) {
        return;
      }
      //for each map extracted from database, if the endDate of the trip
      //is less than or equal to today's date, add it to the list of
      //current trips.      
      extractedData.forEach((loadedTripID, loadedTripData) {
        loadedTrips.add(TripProvider(
          id: loadedTripID,
          title: loadedTripData['title'],
          startDate: DateTime.parse(loadedTripData['startDate']),
          endDate: DateTime.parse(loadedTripData['endDate']),
          image: loadedTripData['image'],
          description: loadedTripData['description'],
          destinations: (loadedTripData['destinations'] as List<dynamic>)
              .map(
                (destination) => Destination(
                  id: destination['id'],
                  country: destination['country'],
                  state: destination['state'],
                  city: destination['city'],
                ),
              )
              .toList(),
          // group: (loadedTripData['group'] as List<dynamic>)
          //     .map(
          //       (groupMember) => User(
          //         id: groupMember['id'],
          //         firstName: groupMember['firstName'],
          //         lastName: groupMember['lastName'],
          //         email: groupMember['email'],
          //         dateOfBirth: groupMember['dateOfBirth'],
          //         location: groupMember['location'],
          //         sex: groupMember['sex'],
          //         profilePic: groupMember['profilePic'],
          //       ),
          //     )
          //     .toList(),
          // lodgings: (loadedTripData['loadings'] as List<dynamic>)
          // .map(
          //   (lodging) => Lodging(
          //     id: lodging['id'],
          //     name: lodging['name'],
          //     location: lodging['location'],
          //     checkInDateTime: lodging['checkInDateTime'],
          //     checkOutDateTime: lodging['checkOutDateTime'],
          //   ),
          // ).toList(),
          // transportations: (loadedTripData['transportations'] as List<dynamic>)
          // .map(
          //   (transport) => Transportation(
          //     id: transport['id'],
          //     title: transport['title'],
          //     transportationType: transport['transportationType'],
          //     startingLocation: transport['startingLocation'],
          //     endingLocation: transport['endingLocation'],
          //     startingDateTime: transport['startingDateTime'],
          //     endingDateTime: transport['endingDateTime'],
          //   ),
          // ).toList(),
          // activities: (loadedTripData['activities'] as List<dynamic>)
          // .map(
          //   (activity) => Activity(
          //     id: activity['id'],
          //     title: activity['title'],
          //     location: activity['location'],
          //     startingDateTime: activity['startingDateTime'],
          //     endingDateTime: activity['endingDateTime'],
          //   ),
          // ).toList(),
        ));
      });
      _trips = loadedTrips.toList();
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  Future<void> updateTrip(String id, TripProvider newTrip, String userId) async {
    final tripIndex = _trips.indexWhere((trip) => trip.id == id);
    if (tripIndex >= 0) {
      final url = 'https://the-travel-app-0920.firebaseio.com/userTrips/$userId/trips.json?auth=$authToken';
      try {
        await http.patch(url,
            body: json.encode({
              'title': newTrip.title,
              'startDate': newTrip.startDate.toIso8601String(),
              'endDate': newTrip.endDate.toIso8601String(),
              'destinations': [
                {
                  'city': newTrip.destinations[0].city,
                  'state': newTrip.destinations[0].state,
                  'country': newTrip.destinations[0].country,
                }
              ],
              'description': newTrip.description,
            }));
        _trips[tripIndex] = newTrip;
        notifyListeners();
      } catch (error) {
        throw error;
      }
    }
  }

}
